{"version":3,"sources":["reportWebVitals.ts","services/EventService.ts","stores/EventStore.ts","stores/ViewStore.ts","stores/AppStore.ts","components/ViewHeader.tsx","components/EventLayout.tsx","components/DayView.tsx","components/EventForm.tsx","components/AgendaEventLayout.tsx","components/AgendaView.tsx","components/View.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","EventService","baseUrl","this","eventId","encodeURIComponent","method","body","options","headers","Object","getOwnPropertyNames","length","JSON","stringify","a","fetch","getCollectionUrl","res","json","responseBody","events","event","getOptions","getElementUrl","EventStore","action","bound","appStore","eventSvc","makeObservable","allEvents","runInAction","push","id","Math","max","map","e","appendEvent","splice","findIndex","removeEvent","observable","ViewStore","currentViewType","newViewType","eventStore","addEvent","AppStore","viewStore","ViewHeader","observer","props","store","onChange","changeViewType","target","value","type","name","checked","EventLayout","keyFn","contentFn","DayView","slice","description","EventForm","useState","startDateTime","endDateTime","timeOfDay","dayOfWeek","student","eventForm","setForm","change","Number","onClick","onSubmitEvent","AgendaEventLayout","onDeleteEvent","formatDateTime","dateTime","Date","toTimeString","className","AgendaView","deleteEvent","View","useEffect","refreshEvents","configure","enforceActions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7da25e4f.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Event } from '../models/Event'\r\n\r\nexport interface IEventService {\r\n  allEvents: () => Promise<Event[]>;\r\n  appendEvent: (event: Event) => Promise<void>;\r\n  removeEvent: (eventId: number) => Promise<void>;\r\n}\r\n\r\nexport class EventService implements IEventService {\r\n  constructor(private baseUrl: string) {}\r\n\r\n  private getCollectionUrl() \r\n  {\r\n      return this.baseUrl + '/events';\r\n  }\r\n  \r\n  private getElementUrl(eventId: number) \r\n  {\r\n      return this.baseUrl + '/events/' + encodeURIComponent(eventId);\r\n  }\r\n  \r\n  private getOptions(method = 'GET', body: object | null = null) \r\n  {\r\n      const options: RequestInit = \r\n      {\r\n          // method: method,\r\n          method,\r\n      };\r\n\r\n      const headers: { [ x: string ]: string } = {};\r\n\r\n      if (method === 'PUT' || method ==='POST') \r\n      {\r\n          headers['Content-Type'] = 'application/json';\r\n      }\r\n\r\n      if (Object.getOwnPropertyNames(headers).length > 0) \r\n      {\r\n          options.headers = headers;\r\n      }\r\n\r\n      if (body !== null) \r\n      {\r\n          options.body = JSON.stringify(body);\r\n      }\r\n\r\n      return options;\r\n  }\r\n    \r\n  async allEvents() {\r\n      const res = await fetch(this.getCollectionUrl());\r\n      const responseBody = await res.json();\r\n\r\n      // Note the new service returns an object with a key named events which is the array. The mock was/is different, it will return the array directly.\r\n      return responseBody.events;\r\n  }\r\n\r\n  async appendEvent(event: Event) {\r\n    const res = await fetch(this.getCollectionUrl(), this.getOptions('POST', event));\r\n    return res.json();\r\n  }\r\n\r\n  async removeEvent(eventId: number)\r\n  {\r\n    const res = await fetch(this.getElementUrl(eventId), this.getOptions(\"DELETE\"));\r\n    return res.json();\r\n  }\r\n}","import { action, makeObservable, observable, runInAction } from 'mobx';\r\nimport { Event } from '../models/Event';\r\nimport { IEventService } from '../services/EventService';\r\nimport { AppStore } from './AppStore';\r\n\r\nexport class EventStore {\r\n  @observable\r\n  appStore: AppStore;\r\n  \r\n  @observable\r\n  events: Event[] = [];\r\n\r\n  constructor(appStore: AppStore, private eventSvc: IEventService)\r\n  {\r\n    makeObservable(this)\r\n    this.appStore = appStore;\r\n  }\r\n\r\n  @action.bound\r\n  async refreshEvents()\r\n  {\r\n    const events = await this.eventSvc.allEvents();\r\n\r\n    runInAction(() => {\r\n      this.events = events;\r\n    });\r\n  }\r\n\r\n  @action.bound\r\n  addEvent(event: Event)\r\n  {\r\n    this.events.push({\r\n      ...event,\r\n      id: Math.max(...this.events.map(e => e.id!), 0) + 1,\r\n    });\r\n    this.eventSvc.appendEvent(event);\r\n  }\r\n\r\n  @action.bound\r\n  deleteEvent(eventId: number)\r\n  {\r\n    this.events.splice(this.events.findIndex(e => e.id === eventId),1);\r\n    this.eventSvc.removeEvent(eventId);\r\n  }\r\n}","import { action, makeObservable, observable } from \"mobx\";\r\nimport {Event} from '../models/Event';\r\nimport { AppStore } from \"./AppStore\";\r\n\r\nexport class ViewStore {\r\n  @observable\r\n  appStore: AppStore;\r\n\r\n  @observable\r\n  currentViewType: string;\r\n\r\n  constructor(appStore: AppStore) {\r\n    makeObservable(this)\r\n    this.appStore = appStore;\r\n    this.currentViewType = \"agenda\";\r\n  }\r\n\r\n  @action.bound\r\n  changeViewType(newViewType: string) {\r\n    this.currentViewType = newViewType;\r\n  }\r\n\r\n  @action.bound\r\n  addEvent(event: Event) {\r\n    this.appStore.eventStore.addEvent(event);\r\n  }\r\n}","\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { EventService } from \"../services/EventService\";\r\nimport { EventStore } from \"./EventStore\";\r\nimport { ViewStore } from \"./ViewStore\";\r\n\r\nexport class AppStore {\r\n  @observable\r\n  eventStore: EventStore;\r\n\r\n  @observable\r\n  viewStore: ViewStore;\r\n\r\n  constructor() {\r\n    makeObservable(this)\r\n    this.eventStore = new EventStore(this, new EventService(\"/api\"));\r\n    this.viewStore = new ViewStore(this);\r\n  }\r\n}","import React, { ChangeEvent, FC } from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppStore } from '../stores/AppStore';\r\n\r\nexport interface ViewHeaderProps {\r\n  store: AppStore;\r\n}\r\n\r\nexport const ViewHeader : FC<ViewHeaderProps> = observer((props) => {\r\n      return(\r\n        <div>\r\n          <h1>View Header - {props.store.viewStore.currentViewType}</h1>\r\n          <div onChange={(e: ChangeEvent<HTMLInputElement>) => props.store.viewStore.changeViewType(e.target.value)}>\r\n            <input \r\n              type=\"radio\"\r\n              name=\"viewType\"\r\n              checked={props.store.viewStore.currentViewType === \"agenda\"}\r\n              value=\"agenda\" />Agenda\r\n            <input\r\n              type=\"radio\"\r\n              name=\"viewType\"\r\n              checked={props.store.viewStore.currentViewType === \"day\"}\r\n              value=\"day\"/>Day\r\n          </div>\r\n        </div>\r\n      );\r\n})","import { observer } from 'mobx-react';\r\nimport React, { FC } from 'react';\r\nimport {Event} from '../models/Event';\r\n\r\nexport interface EventLayoutProps {\r\n  events: Event[];\r\n  keyFn: (event: any) => string | number;\r\n  contentFn: (event: any) => string | number;\r\n}\r\n\r\nexport const EventLayout: FC<EventLayoutProps> = observer(({events, keyFn, contentFn}) => {\r\n  return (\r\n    <ul>\r\n      {events.map(event =>\r\n          <li key={keyFn(event)}>\r\n            {contentFn(event)}\r\n          </li>\r\n      )}\r\n    </ul>\r\n  );\r\n})","import { observer } from 'mobx-react';\r\nimport React, {FC} from 'react';\r\nimport { AppStore } from '../stores/AppStore';\r\nimport { EventLayout } from './EventLayout';\r\n\r\nexport interface DayViewProps {\r\n  store: AppStore;\r\n}\r\n\r\nexport const DayView: FC<DayViewProps> = observer(({store}) => {\r\n  return (\r\n    <EventLayout\r\n      events={store.eventStore.events.slice()}\r\n      keyFn={e => e.id}\r\n      contentFn={e => e.description}\r\n    />\r\n  );\r\n})","import {FC, useState, ChangeEvent} from 'react';\r\nimport {Event} from '../models/Event';\r\n\r\ntype HTMLFormControls = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\nexport interface EventFormProps {\r\n  onSubmitEvent: (event: Event) => void;\r\n}\r\n\r\nexport const EventForm: FC<EventFormProps> = (props) => {\r\n  const [ eventForm, setForm ] = useState ({\r\n    startDateTime: \"\",\r\n    endDateTime: \"\",\r\n    timeOfDay: 0,\r\n    dayOfWeek: 0,\r\n    description: \"\",\r\n    student: \"\",\r\n  });\r\n\r\n  // called when the HTML changes this updates the state\r\n  const change = (e: ChangeEvent<HTMLFormControls>) => {\r\n      setForm({\r\n      ...eventForm,\r\n      [ e.target.name ] : e.target.type === \"number\" ? \r\n                                  Number(e.target.value) \r\n                                : e.target.value,\r\n      })\r\n  };\r\n\r\n  const submitEvent = () => {\r\n    props.onSubmitEvent({...eventForm});\r\n  }\r\n\r\n  return (\r\n    <form>\r\n      <div>\r\n        <label>Description</label>\r\n        <input type=\"text\" name=\"description\" value={eventForm.description} onChange={change}></input>\r\n      </div>\r\n      <div>\r\n        <label>Start Time</label>\r\n        <input type=\"datetime-local\" name=\"startDateTime\" value={eventForm.startDateTime} onChange={change}></input>\r\n      </div>\r\n      <div>\r\n        <label>End Time</label>\r\n        <input type=\"datetime-local\" name=\"endDateTime\" value={eventForm.endDateTime} onChange={change}></input>\r\n      </div>\r\n      <div>\r\n        <label>Student</label>\r\n        <input type=\"text\" name=\"student\" value={eventForm.student} onChange={change}></input>\r\n      </div>\r\n      <button type=\"button\" onClick={submitEvent}>Add Event</button>\r\n    </form>\r\n  );\r\n};","import { observer } from 'mobx-react';\r\nimport React, { FC } from 'react';\r\nimport {Event} from '../models/Event';\r\nimport './AgendaEventLayout.css';\r\n\r\nexport interface AgendaEventLayoutProps {\r\n  event: Event;\r\n  onDeleteEvent: (eventId: number) => void;\r\n}\r\n\r\nexport const AgendaEventLayout: FC<AgendaEventLayoutProps> = observer(({event, onDeleteEvent}) => {\r\n  const formatDateTime = (dateTime: string) => {\r\n    return (new Date(dateTime).toTimeString())\r\n  }\r\n\r\n  const deleteEvent = () => {\r\n    onDeleteEvent(event.id!);\r\n  }\r\n\r\n  return (\r\n    <div className=\"AgendaEvent-frame\" key={event.id}>\r\n      <div className=\"AgendaEvent-description\">{event.description}</div>\r\n      <div className=\"AgendaEvent-student\">{event.student}</div>\r\n      <button className=\"AgendaEvent-button\" onClick={deleteEvent}>X</button>\r\n      <div className=\"AgendaEvent-label\">Start:</div>\r\n      <div className=\"AgendaEvent-time\">{formatDateTime(event.startDateTime)}</div>\r\n      <div className=\"AgendaEvent-label\">End:</div>\r\n      <div className=\"AgendaEvent-time\">{formatDateTime(event.endDateTime)}</div>\r\n    </div>\r\n  );\r\n})","import { observer } from 'mobx-react';\r\nimport React, {FC} from 'react';\r\nimport { AppStore } from '../stores/AppStore';\r\nimport { AgendaEventLayout } from './AgendaEventLayout';\r\n\r\nexport interface AgendaViewProps {\r\n  store: AppStore;\r\n}\r\n\r\nexport const AgendaView: FC<AgendaViewProps> = observer(({store}) => {\r\n\r\n  return (\r\n    <div>\r\n      {store.eventStore.events.map(event =>\r\n          <AgendaEventLayout event={event} onDeleteEvent={store.eventStore.deleteEvent} />\r\n      )}\r\n    </div>\r\n  );\r\n})\r\n","import React, { FC, useEffect } from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppStore } from '../stores/AppStore';\r\n\r\nimport { ViewHeader } from './ViewHeader';\r\nimport { DayView } from './DayView';\r\nimport { EventForm } from './EventForm';\r\nimport { AgendaView } from './AgendaView';\r\n\r\nexport interface ViewProps {\r\n  store: AppStore;\r\n}\r\n\r\nexport const View : FC<ViewProps> = observer((props) => {\r\n\r\n  useEffect(() => {\r\n    props.store.eventStore.refreshEvents();\r\n  }, [props.store]);\r\n\r\n  return(\r\n    <>\r\n      <ViewHeader\r\n        store={props.store}\r\n      />\r\n        <>\r\n          {props.store.viewStore.currentViewType === \"agenda\" ?\r\n              <AgendaView store={props.store} />\r\n            : <DayView store={props.store} />\r\n          }\r\n        </>\r\n      <EventForm onSubmitEvent={props.store.viewStore.addEvent} />\r\n    </>\r\n  );\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { configure } from 'mobx';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport { AppStore } from './stores/AppStore';\n\nimport { View } from './components/View';\n\nconfigure({enforceActions: 'always'});\n\nconst appStore = new AppStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <View\n      store={appStore} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}